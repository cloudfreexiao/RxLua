describe('AnonymousSubject', function()
  describe('create', function()
    it('returns an AnonymousSubject', function()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create(onNext, nil, onCompleted)
      local subject = Rx.AnonymousSubject.create(observer, observable)
      expect(subject).to.be.an(Rx.AnonymousSubject)
    end)
    it('returns an Observer', function()
      local onNext, onCompleted = spy(), spy()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create(onNext, nil, onCompleted)
      local subject = Rx.AnonymousSubject.create(observer, observable)
      subject:onNext(1)
      subject:onCompleted()
      expect(onNext).to.equal({{1}})
      expect(#onCompleted).to.equal(1)
    end)
    it('returns an Observable', function()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create()
      local subject = Rx.AnonymousSubject.create(observer, observable)
      local onNext, onError, onCompleted = observableSpy(subject)
      expect(onNext).to.equal({{42}})
    end)
    it('supports operators', function()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create()
      local subject = Rx.AnonymousSubject.create(observer, observable)
      local onNext, onError, onCompleted = observableSpy(subject:map(tostring))
      expect(onNext).to.equal({{'42'}})
    end)
  end)

  describe('subscribe', function()
    it('returns a Subscription', function()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create()
      local subject = Rx.AnonymousSubject.create(observer, observable)
      expect(subject:subscribe(Rx.Observer.create())).to.be.an(Rx.Subscription)
    end)

    it('accepts 3 functions as arguments', function()
      local onNext, onCompleted = spy(), spy()
      local observable = Rx.Observable.of(42)
      local observer = Rx.Observer.create(onNext, nil, onCompleted)
      local subject = Rx.AnonymousSubject.create(observer, observable)
      subject:subscribe(observer)
      expect(onNext).to.equal({{42}})
      expect(#onCompleted).to.equal(1)
    end)
  end)
end)
